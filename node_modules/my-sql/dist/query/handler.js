'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _worker = require('./worker');

var _worker2 = _interopRequireDefault(_worker);

var _builder = require('./builder');

var _builder2 = _interopRequireDefault(_builder);

var _dbManager = require('../dbManager');

var _dbManager2 = _interopRequireDefault(_dbManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This module handles and distribute work associated with single query execution tasks
 */
class QueryHandler {

    /**
     * Obtains a connection pool from the corresponding connection pool and executes any given mysql query
     *
     * @param {object} options - options object
     *      @param {string} options.query - QueryHandler to be executed
     *      @param {Array} [options.args] - Arguments to the query if it is a prepared statement
     *      @param {string} [options.pool = DEFAULT]  - Mysql connection pool
     *      @param {boolean} [options.lengthConstraint] - Whether or not the group concat max length constraint should be applied
     * @returns {Promise} - result
     */
    executeQuery(options) {
        return new Promise((resolve, reject) => {

            const connectionPool = _dbManager2.default.getConnectionPool(options.pool);

            // Check if the specified pool is a valid one
            if (!connectionPool) {
                const err = new Error('Invalid pool type');
                err.appendDetails('QueryHandler', 'executeQuery', `Pool: ${options.pool}`);
                return reject(err);
            }

            var _builder$parseQuery = _builder2.default.parseQuery(options);

            const query = _builder$parseQuery.query,
                  args = _builder$parseQuery.args;


            connectionPool.getConnection((err, conn) => {
                if (err) {
                    err.appendDetails('QueryHandler', 'executeQuery', '[MySQL]Error getting connection from pool');
                    return reject(err);
                }

                _worker2.default.setSession(conn, options).then(() => _worker2.default.execute(conn, query, args)).then(resolve).catch(err => {
                    err.appendDetails('QueryHandler', 'executeQuery', '[MySQL]Error setting group_concat_max_len to 55555');
                    return reject(err);
                });
            });
        });
    }

} /**
   * Created by pubudud on 8/30/17.
   */

exports.default = new QueryHandler();